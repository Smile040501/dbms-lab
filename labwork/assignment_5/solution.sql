-- =====================================================
/* Data Types */
/**************************************************************************/
/* Q1: Update the address of the customer to now hold their exact coordinates (latitude and longitude) with precision up to 18 digits and the decimal part scaling over 15 digits. Insert at least one record with address ID = ‘ 123456 ’ into the modified address and display (only) this record. */
ALTER TABLE address
ADD COLUMN latitude DECIMAL(18, 15) CHECK (
        latitude >= -90 --         AND latitude <= 90
    );
ALTER TABLE address
ADD COLUMN longitude DECIMAL(18, 15) CHECK (
        longitude >= -180 --         AND longitude <= 180
    );
UPDATE address
SET longitude = 27.2046,
    latitude = 77.4977;
INSERT INTO address(
        address_id,
        address,
        district,
        city_id,
        postal_code,
        phone,
        latitude,
        longitude
    )
VALUES (
        123456,
        '102 Ahalia Hostel',
        'Palakkad',
        495,
        '678557',
        '919888888888',
        27.2046,
        77.4977
    );
SELECT *
FROM address
WHERE address_id = 123456;
/**************************************************************************/
/* Q2: Update the payment details of the customer to now hold the transaction id corresponding to each payment that occurred. The transaction id is a 32 - digit unique identifier that is automatically generated by the computer.Display at least 5 payment records after adding the transaction ID. */
ALTER TABLE payment
ADD COLUMN transaction_id UUID DEFAULT UUID_GENERATE_V4();
SELECT *
FROM payment
LIMIT 6;
/**************************************************************************/
/* Q3: Update the payment details of the customer to now hold the payment info corresponding to each payment that occurred. The payment info is a nested JSON string. Copy and insert the following JSON data after modifying the payment details and display the same */
ALTER TABLE payment
ADD COLUMN payment_info JSON;
UPDATE payment
SET payment_info = '{"intent": "sale", "payer": { "payment_method": "paypal" }, "redirect_urls": { "return_url": "http://return.url", "cancel_url": "http://cancel.url" }, "transactions": [{ "item_list": { "items": [{ "name": "item", "sku": "item", "price": "1.00", "currency": "USD", "quantity": "1" }]}, "amount": { "currency": "USD", "total": "1.00" }, "description": "This is the payment information." }] }';
SELECT *
FROM payment;
-- =====================================================
/* Users, Role and Authorization */
/**************************************************************************/
/* Q1: Add a new user ‘ Sergio ’ who has the role of an owner and can create new roles for new / existing users in the database.
 a.) Display all active users and their roles.
 b.) Restart the psql session as user ‘ Sergio ’ and try creating a database.
 */
CREATE ROLE Sergio WITH CREATEROLE LOGIN PASSWORD 'sergio';
/**************************************************************************/
/* Q2:
 */
-- Using some superuser
ALTER ROLE sergio WITH SUPERUSER;
-- Using sergio
CREATE ROLE Receptionist WITH LOGIN PASSWORD 'receptionist';
GRANT ALL ON rental,
    customer,
    payment TO receptionist;
SELECT grantee,
    table_name,
    STRING_AGG(privilege_type, ', ') AS privileges
FROM information_schema.role_table_grants
WHERE (
        table_name = 'rental'
        OR table_name = 'customer'
        OR table_name = 'payment'
    )
    AND grantee = 'receptionist'
GROUP BY grantee,
    table_name;
/**************************************************************************/
/* Q3:
 */
-- Using postgres
CREATE ROLE "DB Administrator" WITH SUPERUSER LOGIN PASSWORD 'dbadmin';
CREATE ROLE owner WITH CREATEROLE;
-- Using DB Administrator
ALTER ROLE owner WITH SUPERUSER;
/**************************************************************************/
/* Q4:
 */
-- with postgres
CREATE ROLE Manager;
CREATE ROLE MAX;
CREATE ROLE Logged_in;
GRANT manager TO max;
GRANT logged_in TO max;
DROP ROLE manager;
-- =====================================================
/* Functions and Procedures */
/**************************************************************************/
/* Q1: Create a function that consumes an ‘ ID ’ number as an argument and returns the number of films rented by the customer corresponding to that particular ID
 */
CREATE OR REPLACE FUNCTION get_num_films_by_cid(
    cid INT
)
RETURNS INT AS $$
DECLARE
    result INT;
BEGIN
    SELECT DISTINCT COUNT(film_id) INTO result
    FROM rental
        INNER JOIN customer ON rental.customer_id = customer.customer_id
        INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id
    GROUP BY rental.customer_id
    HAVING rental.customer_id = cid;
    RETURN result;
END;
$$ LANGUAGE plpgsql;
/**************************************************************************/
/* Q2: Create a function that consumes an ‘ID’ number as an argument and returns the complete details of the customer corresponding to that particular ID ranging from the customer name (full), their address ID, and the amount paid by them including the payment date.
 */
CREATE OR REPLACE FUNCTION get_customer_info(
    cid INT
)
RETURNS TABLE(
    first_name VARCHAR,
    last_name VARCHAR,
    address_id SMALLINT,
    amount NUMERIC,
    payment_date TIMESTAMP
)
AS $$
BEGIN
    RETURN QUERY
        SELECT customer.first_name,
            customer.last_name,
            customer.address_id,
            payment.amount,
            payment.payment_date
        FROM customer
            INNER JOIN payment ON customer.customer_id = payment.customer_id AND customer.customer_id = cid;
END;
$$ LANGUAGE plpgsql;
/**************************************************************************/
/* Q3: Create a function that consumes ‘actor ID’ as an argument and returns all the films the actor corresponding to the input actor ID has acted in. The function output should be a well-organized table enveloping the film ID, film title, and the complete name (first & last) of the actor.
 */
CREATE OR REPLACE FUNCTION get_actor_films(
    aid INT
)
RETURNS TABLE(
    film_id INT,
    title VARCHAr,
    first_name VARCHAR,
    last_name VARCHAR
)
AS $$
BEGIN
    RETURN QUERY
        SELECT DISTINCT film.film_id,
            film.title,
            actor.first_name,
            actor.last_name
        FROM actor
            INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id AND actor.actor_id = aid
            INNER JOIN film ON film_actor.film_id = film.film_id;
END;
$$ LANGUAGE plpgsql;
/**************************************************************************/
/* Q4: Create a procedure that displays all the film IDs in ascending order and the name (title) of each film corresponding to that particular ID
 */
CREATE OR REPLACE PROCEDURE display_films() LANGUAGE plpgsql AS $$
DECLARE rec RECORD;
BEGIN FOR rec IN (
    SELECT film_id,
        title
    FROM film
    ORDER BY film_id ASC
) LOOP RAISE NOTICE 'film_id: %, title: %',
rec.film_id,
rec.title;
END LOOP;
END;
$$;
